# This is a basic workflow to help you get started with Actions

name: CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-2019]
        include:
          - os: ubuntu-18.04
            target-archs: x86
            cc: clang-8
            cxx: clang++-8
            
          - os: windows-2019
            target-archs: x86
    
    name: ${{ matrix.os }} - ${{ matrix.cc }}
    runs-on: ${{ matrix.os }}
    
    env:
      SOURCEMOD_VERSION: '1.11'

    steps:
      - uses: actions/setup-python@v2
        name: Setup Python
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
      - name: Install Linux packages
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -yq --no-install-recommends g++-multilib
      
      - name: Select compiler
        if: startsWith(runner.os, 'Linux')
        run: |
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
    
      - uses: actions/checkout@v3
        name: Repository checkout
        with:
          fetch-depth: 0
          path: extension
      
      - uses: actions/checkout@v2
        name: Checkout SourceMod
        with:
          repository: alliedmodders/sourcemod
          ref: ${{ env.SOURCEMOD_VERSION }}-dev
          submodules: recursive
          path: sourcemod

      - uses: actions/checkout@v2
        name: Checkout AMBuild
        with:
          repository: alliedmodders/ambuild
          path: ambuild
      
      - name: Setup AMBuild
        shell: bash
        run: |
          pip install ./ambuild

      - name: Build
        working-directory: extension
        run: |
          mkdir build
          cd build
          python ../configure.py --enable-auto-versioning --enable-optimize --targets=${{ matrix.target-archs }}
          ambuild
      
      - name: Upload artifact
        if: github.event_name == 'push' && (startsWith(matrix.os, 'ubuntu-18.04') || startsWith(matrix.os, 'windows-2019'))
        uses: actions/upload-artifact@v1
        with:
          name: ${{ runner.os }}
          path: extension/build/package
      
      - name: Upload artifact
        if: github.event_name == 'push' && strategy.job-index == 0
        uses: actions/upload-artifact@v1
        with:
          name: versioning
          path: extension/build/includes
